trigger:
- main

pool:
  vmImage: ubuntu-latest

steps:
- task: NodeTool@0
  inputs:
    versionSpec: '20.x'
  displayName: 'Install Node.js'

# Build UnityActivateLicense
- task: Npm@1
  inputs:
    command: 'custom'
    workingDir: 'Tasks/UnityActivateLicense/UnityActivateLicenseV1'
    customCommand: 'install --omit=dev'
  displayName: 'NPM Install UnityActivateLicenseV1'

- task: Npm@1
  inputs:
    command: 'custom'
    workingDir: 'Tasks/UnityActivateLicense/UnityActivateLicenseV1'
    customCommand: 'run build'
  displayName: 'Build UnityActivateLicenseV1'

# Build UnityBuild
- task: Npm@1
  inputs:
    command: 'custom'
    workingDir: 'Tasks/UnityBuild/UnityBuildV3'
    customCommand: 'install --omit=dev'
  displayName: 'NPM Install UnityBuildV3'

- task: Npm@1
  inputs:
    command: 'custom'
    workingDir: 'Tasks/UnityBuild/UnityBuildV3'
    customCommand: 'run build'
  displayName: 'Build UnityBuildV3'

# Build UnityCMD
- task: Npm@1
  inputs:
    command: 'custom'
    workingDir: 'Tasks/UnityCMD/UnityCMDV1'
    customCommand: 'install --omit=dev'
  displayName: 'NPM Install UnityCMDV1'

- task: Npm@1
  inputs:
    command: 'custom'
    workingDir: 'Tasks/UnityCMD/UnityCMDV1'
    customCommand: 'run build'
  displayName: 'Build UnityCMDV1'

# Build UnityGetProjectVersion
- task: Npm@1
  inputs:
    command: 'custom'
    workingDir: 'Tasks/UnityGetProjectVersion/UnityGetProjectVersionV1'
    customCommand: 'install --omit=dev'
  displayName: 'NPM Install UnityGetProjectVersionV1'

- task: Npm@1
  inputs:
    command: 'custom'
    workingDir: 'Tasks/UnityGetProjectVersion/UnityGetProjectVersionV1'
    customCommand: 'run build'
  displayName: 'Build UnityGetProjectVersionV1'

- task: Npm@1
  inputs:
    command: 'custom'
    workingDir: 'Tasks/UnityGetProjectVersion/UnityGetProjectVersionV1'
    customCommand: 'run test'
  displayName: 'Build UnityGetProjectVersionV1'

# Build UnitySetup
- task: Npm@1
  inputs:
    command: 'custom'
    workingDir: 'Tasks/UnitySetup/UnitySetupV1'
    customCommand: 'install --omit=dev'
  displayName: 'NPM Install UnitySetupV1'

- task: Npm@1
  inputs:
    command: 'custom'
    workingDir: 'Tasks/UnitySetup/UnitySetupV1'
    customCommand: 'run build'
  displayName: 'Build UnitySetupV1'

# Build UnityTest
- task: Npm@1
  inputs:
    command: 'custom'
    workingDir: 'Tasks/UnityTest/UnityTestV1'
    customCommand: 'install --omit=dev'
  displayName: 'NPM Install UnityTestV1'

- task: Npm@1
  inputs:
    command: 'custom'
    workingDir: 'Tasks/UnityTest/UnityTestV1'
    customCommand: 'run build'
  displayName: 'Build UnityTestV1'

# Install TFX CLI tools  
- task: TfxInstaller@4
  inputs:
      version: 'v0.x'

# Bundle the extension package
- task: CmdLine@2
  inputs:
    script: 'tfx extension create --manifests azure-devops-extension.json'
    failOnStderr: true

# Copy artifact to staging directory
- task: CopyFiles@2
  inputs:
    Contents: '*.vsix'
    TargetFolder: '$(build.artifactstagingdirectory)'
    CleanTargetFolder: true
    OverWrite: true

# Publish artifact
- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: 'drop'
    publishLocation: 'Container'